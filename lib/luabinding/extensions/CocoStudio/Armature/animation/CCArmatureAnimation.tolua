enum MovementEventType
{
    START,
    COMPLETE,
    LOOP_COMPLETE
};

/**
 *  @lua NA
 */
class  CCArmatureAnimation : public CCProcessBase
{
public:
    /**
     * Create with a CCArmature
     * @param armature The CCArmature CCArmatureAnimation will bind to
     */
    static CCArmatureAnimation *create(CCArmature *armature);
public:
    CCArmatureAnimation();
    virtual ~CCArmatureAnimation(void);

    virtual bool init(CCArmature *armature);

    virtual void setAnimationScale(float animationScale);
    virtual float getAnimationScale() const;

    virtual void setSpeedScale(float speedScale);
    virtual float getSpeedScale() const;

    virtual void setAnimationInternal(float animationInternal);

    /**
     * Play animation by animation name.
     *
     * @param  animationName  The animation name you want to play
     * @param  durationTo The frames between two animation changing-over.
     *         It's meaning is changing to this animation need how many frames
     *
     *         -1 : use the value from CCMovementData get from flash design panel
     * @param  durationTween  The frame count you want to play in the game.
     *         if  _durationTween is 80, then the animation will played 80 frames in a loop
     *
     *         -1 : use the value from CCMovementData get from flash design panel
     *
     * @param  loop   Whether the animation is loop
     *
     *         loop < 0 : use the value from CCMovementData get from flash design panel
     *         loop = 0 : this animation is not loop
     *         loop > 0 : this animation is loop
     *
     * @param  tweenEasing CCTween easing is used for calculate easing effect
     *
     *         TWEEN_EASING_MAX : use the value from CCMovementData get from flash design panel
     *         -1 : fade out
     *         0  : line
     *         1  : fade in
     *         2  : fade in and out
     *
     */
    void play(const char *animationName, int durationTo = -1, int durationTween = -1,  int loop = -1, int tweenEasing = TWEEN_EASING_MAX);

    /**
     * Play animation by index, the other param is the same to play.
     * @param  animationIndex  the animation index you want to play
     */
    void playByIndex(int animationIndex,  int durationTo = -1, int durationTween = -1,  int loop = -1, int tweenEasing = TWEEN_EASING_MAX);

    /**
     * Go to specified frame and play current movement.
     * You need first switch to the movement you want to play, then call this function.
     * 
     * example : playByIndex(0);
     *           gotoAndPlay(0);
     *           playByIndex(1);
     *           gotoAndPlay(0);
     *           gotoAndPlay(15);
     */
    virtual void gotoAndPlay(int frameIndex);

    /**
     * Go to specified frame and pause current movement.
     */
    virtual void gotoAndPause(int frameIndex);

    /**
     * Pause the Process
     */
    virtual void pause();
    /**
     * Resume the Process
     */
    virtual void resume();
    /**
     * Stop the Process
     */
    virtual void stop();


    /**
     * Get movement count
     */
    int getMovementCount();

    void update(float dt);

    /**
     * Get current movementID
     * @return The name of current movement
     */
    std::string getCurrentMovementID();

    /**
     * Set armature's movement event callback function
     * To disconnect this event, just setMovementEventCallFunc(NULL, NULL);
     */
    void registerMovementEventScript(LUA_FUNCTION handler);
	void unregisterMovementEventScript();

    /**
     * Set armature's frame event callback function
     * To disconnect this event, just setFrameEventCallFunc(NULL, NULL);
     */
    void registerFrameEventScript(LUA_FUNCTION handler);
	void unregisterFrameEventScript();
	
	// add by hanyi start here
	bool isMovementExist(const char *animationName);
	bool isMovementExist(int animationIndex);
	// add by hanyi end here
	
    /** 
     * Returns a user assigned CCObject
     *
     * @return A user assigned CCObject
     */
    virtual CCObject* getUserObject();
    /**
     * Returns a user assigned CCObject
     *
     * The UserObject will be retained once in this method,
     * and the previous UserObject (if existed) will be relese.
     * The UserObject will be released in destructure.
     *
     * @param A user assigned CCObject
     */
    virtual void setUserObject(CCObject *pUserObject);
};
