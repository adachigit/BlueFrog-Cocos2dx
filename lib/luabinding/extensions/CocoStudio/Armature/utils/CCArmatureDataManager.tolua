struct CCRelativeData
{
    std::vector<std::string> plistFiles;
    std::vector<std::string> armatures;
    std::vector<std::string> animations;
    std::vector<std::string> textures;
};

/**
 *	@brief	format and manage armature configuration and armature animation
 *  @lua NA
 */
class  CCArmatureDataManager : public CCObject
{
public:
    /**
     *  @js getInstance
     */
    static CCArmatureDataManager *sharedArmatureDataManager();

    static void purge();

public:

    /**
     * Init CCArmatureDataManager
     */
    virtual bool init();



    /**
     * Add armature data
     * @param id The id of the armature data
     * @param armatureData CCArmatureData *
     */
    void addArmatureData(const char *id, CCArmatureData *armatureData, const char *configFilePath = "");

    /**
     *	@brief	get armature data
     *	@param	id the id of the armature data you want to get
     *  @return	CCArmatureData *
     */
    CCArmatureData *getArmatureData(const char *id);

    /**
     *	@brief	remove armature data
     *	@param	id the id of the armature data you want to get
     */
    void removeArmatureData(const char *id);

    /**
     *	@brief	add animation data
     *	@param 	id the id of the animation data
     *  @return CCAnimationData *
     */
    void addAnimationData(const char *id, CCAnimationData *animationData, const char *configFilePath = "");

    /**
     *	@brief	get animation data from m_pAnimationDatas(CCDictionary)
     *	@param 	id the id of the animation data you want to get
     *  @return CCAnimationData *
     */
    CCAnimationData *getAnimationData(const char *id);

    /**
     *	@brief	remove animation data
     *	@param 	id the id of the animation data
     */
    void removeAnimationData(const char *id);

    /**
     *	@brief	add texture data
     *	@param 	id the id of the texture data
     *  @return CCTextureData *
     */
    void addTextureData(const char *id, CCTextureData *textureData, const char *configFilePath = "");

    /**
     *	@brief	get texture data
     *	@param 	id the id of the texture data you want to get
     *  @return CCTextureData *
     */
    CCTextureData *getTextureData(const char *id);

    /**
     *	@brief	remove texture data
     *	@param 	id the id of the texture data you want to get
     */
    void removeTextureData(const char *id);

    /**
     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
     */
    void addArmatureFileInfo(const char *configFilePath);

    /**
     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
     *			It will load data in a new thread
     */
    void addArmatureFileInfoAsync(const char *configFilePath, CCObject *target, SEL_SCHEDULE selector);

    void addArmatureFileInfoAsync(const char *configFilePath, LUA_FUNCTION handler);

    /**
     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
     */
    void addArmatureFileInfo(const char *imagePath, const char *plistPath, const char *configFilePath);

    /**
     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
     *			It will load data in a new thread
     */
    void addArmatureFileInfoAsync(const char *imagePath, const char *plistPath, const char *configFilePath, CCObject *target, SEL_SCHEDULE selector);


    virtual void removeArmatureFileInfo(const char *configFilePath);


    /**
     *	@brief	Add sprite frame to CCSpriteFrameCache, it will save display name and it's relative image name
     */
    void addSpriteFrameFromFile(const char *plistPath, const char *imagePath, const char *configFilePath = "");


    /**
     *	@brief	Juge whether or not need auto load sprite file
     */
    bool isAutoLoadSpriteFile();


    CCDictionary *getArmatureDatas() const;
    CCDictionary *getAnimationDatas() const;
    CCDictionary *getTextureDatas() const;

};
