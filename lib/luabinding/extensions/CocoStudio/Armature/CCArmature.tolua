/**
 *  @lua NA
 */
class  CCArmature : public CCNode, public CCBlendProtocol
{

public:

    /**
    * Allocates and initializes an armature.
    * @return An initialized armature which is marked as "autorelease".
    */
    static CCArmature *create();

    /**
    * Allocates an armature, and use the CCArmatureData named name in CCArmatureDataManager to initializes the armature.
    *
    * @param  name CCArmature will use the name to find the CCArmatureData to initializes it.
    * @return A initialized armature which is marked as "autorelease".
    */
    static CCArmature *create(const char *name);

    static CCArmature *create(const char *name, CCBone *parentBone);

public:
    /**
     *  @js ctor
     */
    CCArmature();
    /**
     *  @js NA
     */
    ~CCArmature(void);

    /**
     * Init the empty armature
     */
    virtual bool init();

    /**
     * Init an armature with specified name
     * @param name CCArmature name
     */
    virtual bool init(const char *name);

    virtual bool init(const char *name, CCBone *parentBone);
    /**
     * Add a CCBone to this CCArmature,
     *
     * @param bone  The CCBone you want to add to CCArmature
     * @param parentName   The parent CCBone's name you want to add to . If it's  NULL, then set CCArmature to its parent
     */
    virtual void addBone(CCBone *bone, const char *parentName);
    /**
     * Get a bone with the specified name
     *
     * @param name The bone's name you want to get
     */
    virtual CCBone *getBone(const char *name) const;
    /**
     * Change a bone's parent with the specified parent name.
     *
     * @param bone The bone you want to change parent
     * @param parentName The new parent's name.
     */
    virtual void changeBoneParent(CCBone *bone, const char *parentName);
    /**
     * Remove a bone with the specified name. If recursion it will also remove child CCBone recursionly.
     *
     * @param bone The bone you want to remove
     * @param recursion Determine whether remove the bone's child  recursion.
     */
    virtual void removeBone(CCBone *bone, bool recursion);

    /**
     * Get CCArmature's bone dictionary
     * @return CCArmature's bone dictionary
     */
    CCDictionary *getBoneDic();

    /**
     * This boundingBox will calculate all bones' boundingBox every time
     */
    virtual CCRect boundingBox();

    void setBlendFunc(ccBlendFunc blendFunc);
    ccBlendFunc getBlendFunc(void);
	
    CCBone *getBoneAtPoint(float x, float y);

    virtual void visit();
    virtual void update(float dt);
    virtual void draw();

    virtual CCAffineTransform nodeToParentTransform();

    /**
     * Set contentsize and Calculate anchor point.
     */
    virtual void updateOffsetPoint();

    virtual void setAnimation(CCArmatureAnimation *animation);
    virtual CCArmatureAnimation *getAnimation();

    virtual CCTextureAtlas *getTexureAtlasWithTexture(CCTexture2D *texture);

	virtual std::string getName();
	
    virtual void setColliderFilter(CCColliderFilter *filter);
};
